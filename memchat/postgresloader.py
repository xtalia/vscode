from config import config_data as creds
import psycopg2
from psycopg2.extras import RealDictCursor
import json
import time
from threading import Timer

DB_LOGIN = creds["db"]["login"]
DB_PASS = creds["db"]["pass"]
DB_HOST = creds["db"]["host"]
DB = creds["db"]["db"]


# Cache to hold the data
cache_file = 'cache.json'
last_updated = 0
cache_duration = 30 * 60  # 30 minutes

def get_db_connection():
    return psycopg2.connect(
        host=DB_HOST,
        database=DB,
        user=DB_LOGIN,
        password=DB_PASS
    )

def load_cache():
    global cache, last_updated
    try:
        with open(cache_file, 'r') as f:
            data = json.load(f)
            cache = data['cache']
            last_updated = data['last_updated']
    except (FileNotFoundError, json.JSONDecodeError):
        cache = None
        last_updated = 0

def save_cache():
    global cache, last_updated
    with open(cache_file, 'w') as f:
        json.dump({'cache': cache, 'last_updated': last_updated}, f)

def map_to_english(item):
    return {
        'article': item['–ê—Ä—Ç–∏–∫—É–ª'],
        'external_code': item['–í–Ω–µ—à–Ω–∏–π –∫–æ–¥'],
        'name': item['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'],
        'competitor_shop': item['–ú–∞–≥–∞–∑–∏–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç'],
        'competitor_price': item['–¶–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞'],
        'store_saratov': item['–ú–∞–≥–∞–∑–∏–Ω –°–∞—Ä–∞—Ç–æ–≤'],
        'store_voronezh': item['–ú–∞–≥–∞–∑–∏–Ω –í–æ—Ä–æ–Ω–µ–∂'],
        'store_lipetsk': item['–ú–∞–≥–∞–∑–∏–Ω –õ–∏–ø–µ—Ü–∫'],
        'store_balakovo': item['–ú–∞–≥–∞–∑–∏–Ω –ë–∞–ª–∞–∫–æ–≤–æ'],
        'price_saratov': item['–¶–µ–Ω–∞: –°–∞—Ä–∞—Ç–æ–≤'],
        'price_voronezh': item['–¶–µ–Ω–∞: –í–æ—Ä–æ–Ω–µ–∂'],
        'price_lipetsk': item['–¶–µ–Ω–∞: –õ–∏–ø–µ—Ü–∫'],
        'price_balakovo': item['–¶–µ–Ω–∞: –ë–∞–ª–∞–∫–æ–≤–æ'],
        'recommended_saratov': item['–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –°–∞—Ä–∞—Ç–æ–≤'],
        'recommended_voronezh': item['–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –í–æ—Ä–æ–Ω–µ–∂'],
        'recommended_lipetsk': item['–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –õ–∏–ø–µ—Ü–∫'],
        'recommended_balakovo': item['–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ë–∞–ª–∞–∫–æ–≤–æ']
    }

def update_cache(force=False):
    global cache, last_updated
    if not force and (time.time() - last_updated < cache_duration):
        return
    try:
        conn = get_db_connection()
        cur = conn.cursor(cursor_factory=RealDictCursor)
        cur.execute('SELECT * FROM table_bots')
        data = cur.fetchall()
        cache = [map_to_english(item) for item in data]
        cur.close()
        conn.close()
        last_updated = time.time()
        save_cache()
        print("Cache updated")
    except Exception as e:
        print(f"Error updating cache: {e}")
        if cache is None:
            raise

# Automatically update the cache every 44 minutes
def schedule_cache_update():
    Timer(cache_duration, schedule_cache_update).start()
    update_cache()

# Initial cache load and update
load_cache()
update_cache()
schedule_cache_update()

def search_cache(query):
    if isinstance(query, str):
        return [item for item in cache if query.lower() in item["name"].lower()][:5]
    elif isinstance(query, int):
        return next((item for item in cache if item["article"] == str(query)), None)
    return []

def format_response(item):
    if not item:
        return "No data found"

    template = f"""
üÜî {item['article']}
üî¢ {item['external_code']}
üè∑Ô∏è {item['name']}
üí∞ üÜÇ: {item['price_saratov']} {'üòÄ' if item['price_saratov'] >= item['recommended_saratov'] else 'üò¢ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–º'} 
üí∞ üÜÖ: {item['price_voronezh']} {'üòÄ' if item['price_voronezh'] >= item['recommended_voronezh'] else 'üò¢ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–º'} 
üí∞ üÖª: {item['price_lipetsk']} {'üòÄ' if item['price_lipetsk'] >= item['recommended_lipetsk'] else 'üò¢ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–º'} 
üí∞ üÖ±Ô∏è: {item['price_balakovo']} {'üòÄ' if item['price_balakovo'] >= item['recommended_balakovo'] else 'üò¢ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–º'} 
üíñ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ü–µ–Ω—ã: üÜÇ {item['recommended_saratov']}, üÜÖ {item['recommended_voronezh']}, üÖª {item['recommended_lipetsk']}, üÖ±Ô∏è {item['recommended_balakovo']}
üì¶ –ï—Å—Ç—å: üÜÇ {item['store_saratov']}, üÜÖ {item['store_voronezh']}, üÖª {item['store_lipetsk']}, üÖ±Ô∏è {item['store_balakovo']}
–û—Ç–¥–∞–µ–º? –°–º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤–µ–∑—Ç–∏?
"""
    return template.strip()

def handle_query(query):
    try:
        update_cache()
    except Exception as e:
        if isinstance(query, int):
            return f"Server error: {e}. Try again later."
        else:
            return "Server error, send the request as a number and contact Ivan."

    if isinstance(query, str) and not query.isdigit():
        results = search_cache(query)
        if not results:
            return "No data found"
        return "\n\n".join([format_response(item) for item in results])
    elif query.isdigit():
        result = search_cache(int(query))
        if result:
            return format_response(result)
        else:
            return "No data found"
    else:
        return "Invalid query"

# Example usage
if __name__ == "__main__":

    while True:
        query = input("Enter search query (text or article number): ")
        print(handle_query(query))

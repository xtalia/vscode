from config import config_data as creds
import psycopg2
from psycopg2.extras import RealDictCursor
import json
import time
from threading import Timer
import requests
from bs4 import BeautifulSoup
import config

DB_LOGIN = creds["db"]["login"]
DB_PASS = creds["db"]["pass"]
DB_HOST = creds["db"]["host"]
DB = creds["db"]["db"]


# Cache to hold the data
cache_file = 'cache.json'
last_updated = 0
cache_duration = 31 * 60  # 30 minutes

def get_db_connection():
    return psycopg2.connect(
        host=DB_HOST,
        database=DB,
        user=DB_LOGIN,
        password=DB_PASS
    )

def load_cache():
    global cache, last_updated
    try:
        with open(cache_file, 'r') as f:
            data = json.load(f)
            cache = data['cache']
            last_updated = data['last_updated']
    except (FileNotFoundError, json.JSONDecodeError):
        cache = None
        last_updated = 0

def save_cache():
    global cache, last_updated
    with open(cache_file, 'w') as f:
        json.dump({'cache': cache, 'last_updated': last_updated}, f)

def map_to_english(item):
    return {
        'id': item['–ê—Ä—Ç–∏–∫—É–ª'],  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        'article': item['–ê—Ä—Ç–∏–∫—É–ª'],
        'external_code': item['–í–Ω–µ—à–Ω–∏–π –∫–æ–¥'],
        'name': item['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'],
        'competitor_shop': item['–ú–∞–≥–∞–∑–∏–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç'],
        'competitor_price': item['–¶–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞'],
        'store_saratov': item['–ú–∞–≥–∞–∑–∏–Ω –°–∞—Ä–∞—Ç–æ–≤'],
        'store_voronezh': item['–ú–∞–≥–∞–∑–∏–Ω –í–æ—Ä–æ–Ω–µ–∂'],
        'store_lipetsk': item['–ú–∞–≥–∞–∑–∏–Ω –õ–∏–ø–µ—Ü–∫'],
        'store_balakovo': item['–ú–∞–≥–∞–∑–∏–Ω –ë–∞–ª–∞–∫–æ–≤–æ'],
        'price_saratov': item['–¶–µ–Ω–∞: –°–∞—Ä–∞—Ç–æ–≤'],
        'price_voronezh': item['–¶–µ–Ω–∞: –í–æ—Ä–æ–Ω–µ–∂'],
        'price_lipetsk': item['–¶–µ–Ω–∞: –õ–∏–ø–µ—Ü–∫'],
        'price_balakovo': item['–¶–µ–Ω–∞: –ë–∞–ª–∞–∫–æ–≤–æ'],
        'recommended_saratov': item['–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –°–∞—Ä–∞—Ç–æ–≤'],
        'recommended_voronezh': item['–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –í–æ—Ä–æ–Ω–µ–∂'],
        'recommended_lipetsk': item['–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –õ–∏–ø–µ—Ü–∫'],
        'recommended_balakovo': item['–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ë–∞–ª–∞–∫–æ–≤–æ']
    }


def update_cache(force=False):
    global cache, last_updated
    if not force and (time.time() - last_updated < cache_duration):
        return
    try:
        conn = get_db_connection()
        cur = conn.cursor(cursor_factory=RealDictCursor)
        cur.execute('SELECT * FROM table_bots')
        data = cur.fetchall()
        cur.close()
        conn.close()
        
        cache = {}
        for item in data:
            mapped_item = map_to_english(item)
            cache[mapped_item['id']] = mapped_item
        
        last_updated = time.time()
        save_cache()
        print("Cache updated")
    except Exception as e:
        print(f"Error updating cache: {e}")
        if cache is None:
            raise


# Automatically update the cache every 44 minutes
def schedule_cache_update():
    Timer(cache_duration, schedule_cache_update).start()
    update_cache()

# Initial cache load and update
load_cache()
update_cache()
schedule_cache_update()

def search_cache(query):
    if isinstance(query, str):
        results = [item for item in cache.values() if query.lower() in item["name"].lower()]
        return results[:10]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ –ø—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    elif isinstance(query, int):
        return cache.get(str(query))
    return []



def format_response(item):
    if not item:
        return "No data found"

    template = f"""
üÜî {item['article']}
üî¢ {item['external_code']}
üè∑Ô∏è {item['name']}
üí∞ üÜÇ: {item['price_saratov']} {'üòÄ –ø—Ä–æ—Ö–æ–¥–∏–º' if item['price_saratov'] >= item['recommended_saratov'] else 'üò¢ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–º'} 
üí∞ üÜÖ: {item['price_voronezh']} {'üòÄ –ø—Ä–æ—Ö–æ–¥–∏–º' if item['price_voronezh'] >= item['recommended_voronezh'] else 'üò¢ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–º'} 
üí∞ üÖª: {item['price_lipetsk']} {'üòÄ –ø—Ä–æ—Ö–æ–¥–∏–º' if item['price_lipetsk'] >= item['recommended_lipetsk'] else 'üò¢ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–º'} 
üí∞ üÖ±Ô∏è: {item['price_balakovo']} {'üòÄ –ø—Ä–æ—Ö–æ–¥–∏–º' if item['price_balakovo'] >= item['recommended_balakovo'] else 'üò¢ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–º'} 

üì¶ –ï—Å—Ç—å: üÜÇ {item['store_saratov']}, üÜÖ {item['store_voronezh']}, üÖª {item['store_lipetsk']}, üÖ±Ô∏è {item['store_balakovo']}
–û—Ç–¥–∞–µ–º? –°–º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤–µ–∑—Ç–∏?
"""
# üíñ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ü–µ–Ω—ã: üÜÇ {item['recommended_saratov']}, üÜÖ {item['recommended_voronezh']}, üÖª {item['recommended_lipetsk']}, üÖ±Ô∏è {item['recommended_balakovo']}
    return template.strip()

def handle_query(query):
    try:
        update_cache()
    except Exception as e:
        if isinstance(query, int):
            return f"Server error: {e}. Try again later."
        else:
            return "Server error, send the request as a number and contact Ivan."

    if isinstance(query, str) and not query.isdigit():
        results = search_cache(query)
        if not results:
            return "No data found"
        return "\n\n".join([format_response(item) for item in results])
    elif query.isdigit():
        result = search_cache(int(query))
        if result:
            return format_response(result)
        else:
            return "No data found"
    else:
        return "Invalid query"

def send_data(message):
    search_query = message.text # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for word in config.SITE_TRIGGERS: # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ
        search_query = search_query.replace (word, "")
    
    base_urls = [ # —Å–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö url –¥–ª—è —Ç—Ä–µ—Ö –≥–æ—Ä–æ–¥–æ–≤
    "https://hatiko.ru",
    "https://voronezh.hatiko.ru",
    "https://lipetsk.hatiko.ru",
    "https://balakovo.hatiko.ru"
]
    urls = [ # —Å–ø–∏—Å–æ–∫ url –¥–ª—è —Ç—Ä–µ—Ö –≥–æ—Ä–æ–¥–æ–≤
        f"https://hatiko.ru/search/?query={search_query}",
        f"https://voronezh.hatiko.ru/search/?query={search_query}",
        f"https://lipetsk.hatiko.ru/search/?query={search_query}",
        f"https://balakovo.hatiko.ru/search/?query={search_query}"
    ]
    data = [] # —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    for url in urls: # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ url
        response = requests.get(url) # –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        soup = BeautifulSoup(response.text, "html.parser") # –ø–∞—Ä—Å–∏–º html
        product = soup.find("a", class_="s-product-header") # –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Å—Å—ã–ª–∫–æ–π
        if product: # –µ—Å–ª–∏ —Ç–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –µ—Å—Ç—å
            title = product["title"] # –ø–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            link = product["href"] # –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É
            price = soup.find("span", class_="price").text.replace(" ", "") # –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —Å —Ü–µ–Ω–æ–π –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª
            data.append((title, price, link)) # –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ç–µ–∂ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Å–ø–∏—Å–æ–∫
        else: # –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç
            data.append(("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")) # –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ç–µ–∂ —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ —Å–ø–∏—Å–æ–∫
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
    for i in range(len(data)): # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö
        data[i] = (data[i][0], data[i][1], base_urls[i] + data[i][2]) # –∑–∞–º–µ–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π url –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π url, —Å–æ–µ–¥–∏–Ω—è—è –±–∞–∑–æ–≤—ã–π url —Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º url
    message_text = f"üß≠ {data[0][0]}\n" # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    message_text += f"ü™ôüÜÇ {data[0][1]}\n" # —Ü–µ–Ω–∞ –¥–ª—è –°–∞—Ä–∞—Ç–æ–≤–∞
    message_text += f"ü™ôüÜÖ {data[1][1]}\n" # —Ü–µ–Ω–∞ –¥–ª—è –í–æ—Ä–æ–Ω–µ–∂–∞
    message_text += f"ü™ôüÖª {data[2][1]}\n" # —Ü–µ–Ω–∞ –¥–ª—è –õ–∏–ø–µ—Ü–∫–∞
    message_text += f"ü™ôüóø {data[3][1]}\n\n" # —Ü–µ–Ω–∞ –¥–ª—è Bal
    message_text += f"üåêüÜÇ: {data[0][2]}\n" # —Å—Å—ã–ª–∫–∞ –¥–ª—è –°–∞—Ä–∞—Ç–æ–≤–∞
    message_text += f"üåêüÜÖ: {data[1][2]}\n" # —Å—Å—ã–ª–∫–∞ –¥–ª—è –í–æ—Ä–æ–Ω–µ–∂–∞
    message_text += f"üåêüÖª: {data[2][2]}\n" # —Å—Å—ã–ª–∫–∞ –¥–ª—è –õ–∏–ø–µ—Ü–∫–∞
    message_text += f"üåêüóø: {data[3][2]}" # —Å—Å—ã–ª–∫–∞ –¥–ª—è Bal
    
    return message_text


# Example usage
if __name__ == "__main__":

    while True:
        query = input("Enter search query (text or article number): ")
        print(handle_query(query))
